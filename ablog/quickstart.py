# -*- coding: utf-8 -*-
"""
    ablog.quickstart
    ~~~~~~~~~~~~~~~~~

    Quickly setup documentation source to work with Ablog.

    :copyright: Copyright 2007-2015 by Ablog Team
    :license: 
"""
import os
import sys
import inspect
import optparse
from os import path


from ablog import __version__
from sphinx import quickstart as sphinx_quickstart
from sphinx.quickstart import boolean, ok, choice, do_prompt, is_path, mkdir_p
from sphinx.util.console import purple, bold, red, turquoise, nocolor, color_terminal

class MyFormatter(optparse.IndentedHelpFormatter):
    def format_usage(self, usage):
        return usage

    def format_help(self, formatter):
        result = []
        if self.description:
            result.append(self.format_description(formatter))
        if self.option_list:
            result.append(self.format_option_help(formatter))
        return "\n".join(result)

class ABlogTemplates(object):
    if sys.version_info >= (3, 0):
        # prevents that the file is checked for being written in Python 2.x syntax
        ABLOG_QUICKSTART_CONF = u'#!/usr/bin/env python3\n'
    else:
        ABLOG_QUICKSTART_CONF = u''
    ABLOG_QUICKSTART_CONF += u'''\
# -*- coding: utf-8 -*-
#
# %(project)s documentation build configuration file, created by
# sphinx-quickstart on %(now)s.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os

# ablog: Import ablog module 
import ablog


# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [%(extensions)s]

# ablog: Add ablog to sphinx extentions list
if extensions:
    extensions += 'ablog'
else:
    extensions += ['ablog']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['%(dot)stemplates']

# ablog: Append ablog templates path of ablog to sphinx templates_path
if templates_path:
    templates_path.append(ablog.get_html_templates_path())
else:
    templates_path = [ablog.get_html_templates_path()]

# The suffix of source filenames.
source_suffix = '%(suffix)s'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = '%(master_str)s'

# General information about the project.
project = u'%(project_str)s'
copyright = u'%(copyright_str)s'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '%(version_str)s'
# The full version, including alpha/beta/rc tags.
release = '%(release_str)s'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%%B %%d, %%Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = [%(exclude_patterns)s]

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'default'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['%(dot)sstatic']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%%b %%d, %%Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# ablog: On Read The Docs, ABlog may cause an exception when Sphinx build environment is being pickled.
if os.environ.get('READTHEDOCS', None) == 'True':
    skip_pickling = True

# ---------------
# ablog: General ABlog Options
# ---------------

# A path relative to the configuration directory for blog archive pages.
# Default is ``'blog'``.
# blog_path = 'blog'

# The “title” for the blog, used in acthive pages.  Default is ``'Blog'``.
blog_title = 'A Blog'

# Base URL for the website, required for generating feeds.
# blog_baseurl = "http://ablog.readthedocs.org/"

   

# Choose to archive only post titles in collection pages, default is
#  ``False``.
# blog_archive_titles

# -------------------------------
# ablog: Authors, languages, & locations
# -------------------------------

# A dictionary of author names mapping to author full display names and
# links. Dictionary keys are what should be used in ``post`` directive
# to refer to the author.  Default is ``{}``. 

#blog_authors = {
#        'Ahmet': ('Ahmet Bakan', 'http://ahmetbakan.com'),
#        'Durden': ('Tyler Durden',
#                    'http://en.wikipedia.org/wiki/Tyler_Durden'),
#    }

# A dictionary of language code names mapping to full display names and
# links of these languages. Similar to :confval:`blog_authors`, dictionary
# keys should be used in ``post`` directive to refer to the locations.
# Default is ``{}``. 

#blog_languages = {
#   'en': ('English', None),
#   }

# A dictionary of location names mapping to full display names and
# links of these locations. Similar to :confval:`blog_authors`, dictionary
# keys should be used in ``post`` directive to refer to the locations.
# Default is ``{}``.

#blog_locations = {
#   'Pittsburgh': ('Pittsburgh, PA', None),
#    'SF': ('San Francisco, CA', None),
#   }

# Name of the default author defined in :confval:`blog_authors`.
# Default is ``None``.

#blog_default_author = 'Durden'

#  Code name of the default language defined in :confval:`blog_languages`.
#  Default is ``None``. -> en

#blog_default_language = 'en'

# Name of the default location defined in :confval:`blog_locations`.
# Default is ``None``.

#blog_default_location = 'SF'

# ------------
# ablog: Post related
# ------------

# Date display format (default is ``'!b !d, !Y'``) for published posts that
# goes as input to :meth:`datetime.date.strftime`.
# TODO: Replace !  with percent sign ascii/unicode: 25h ---> need to figure out how to escape it to 

#post_date_format = '!b !d, !Y'


# Number of paragraphs (default is ``1``) that will be displayed as an excerpt
# from the post. Setting this ``0`` will result in displaying no post excerpt
# in archive pages.  This option can be set on a per post basis using

#post_auto_excerpt = 1

# Index of the image that will be displayed in the excerpt of the post.
# Default is ``0``, meaning no image.  Setting this to ``1`` will include
# the first image, when available, to the excerpt.  This option can be set
# on a per post basis using :rst:dir:`post` directive option ``image``.

#post_auto_image = 0

# Number of seconds (default is ``5``) that a redirect page waits before
# refreshing the page to redirect to the post.

#post_redirect_refresh = 5

# When ``True``, post title and excerpt is always taken from the section that
# contains the :rst:dir:`post` directive, instead of the document. This is the
# behavior when :rst:dir:`post` is used multiple times in a document. Default
# is ``False``.

#post_always_section = False

# ----------
# ablog: Blog feeds
# ----------

# Turn feeds by setting :confval:`blog_baseurl` configuration variable.
# Choose to create feeds per author, location, tag, category, and year,
# default is ``False``.

#blog_feed_archives = False


# Choose to display full text in blog feeds, default is ``False``.

#blog_feed_fulltext = False



# Blog feed subtitle, default is ``None``.

#blog_feed_subtitle = None



# Choose to feed only post titles, default is ``False``.

#blog_feed_titles = False

# Specify number of recent posts to include in feeds, default is ``None``
# for all posts.

#blog_feed_length = None 

# ------------
# ablog: Font awesome
# ------------

# ABlog templates will use of `Font Awesome`_ icons if one of the following
# is ``True`` 
# --> Font Awesome: http://fontawesome.io/

# Link to `Font Awesome`_ at `Bootstrap CDN`_ and use icons in sidebars
# and post footers.  Default: ``False``

#fontawesome_link_cdn = False

# Sphinx_ theme already links to `Font Awesome`_.  Default: ``False``

#fontawesome_included = False

# Alternatively, you can provide the path to `Font Awesome`_ :file:`.css`
# with the configuration option: fontawesome_css_file
# Path to `Font Awesome`_ :file:`.css` (default is ``None``) that will
# be linked to in HTML output by ABlog.

# fontawesome_css_file = None

# ------------------
# Disqus integration
# ------------------

# You can enable Disqus_ by setting ``disqus_shortname`` variable.
# Disqus_ short name for the website. 
# TODO: Default is?? 

# disqus_shortname = None


# Choose to disqus pages that are not posts, default is ``False``.

#disqus_pages = False

# Choose to disqus posts that are drafts (without a published date),
# default is ``False``.
#disqus_drafts = False

# ------------------
# ablog: Blog sidebars
# ------------------

# There are seven sidebars you can include in your HTML output
# using Sphinx_ :confval:`html_sidebars` configuration option.  Sidebars that
# you see on the left are listed below in the same order:
# TODO: Where are the missing 2 sidebars
html_sidebars = {
    '**': [ 'postcard.html', 
            'recentposts.html', 'tagcloud.html', 
            'categories.html',  'archives.html', 
            'searchbox.html',
            ],
        }
'''

    ABLOG_EPUB_CONFIG = u''

    ABLOG_INTERSPHINX_CONFIG = u''

    ABLOG_MASTER_FILE = u'''\
.. %(project)s ablog master file, created by
   ablog-quickstart on %(now)s.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to %(author)s's Blog!
===========%(project_underline)s=================

.. postlist:: 10
   :category: Release
   
===============

* :ref:`search`

'''

    ABLOG_MAKEFILE = u'''\
# Makefile for Sphinx documentation
#

# You can set these variables from the command line.
SPHINXOPTS    =
SPHINXBUILD   = sphinx-build
PAPER         =
BUILDDIR      = %(rbuilddir)s

# User-friendly check for sphinx-build
ifeq ($(shell which $(SPHINXBUILD) >/dev/null 2>&1; echo $$?), 1)
$(error \
The '$(SPHINXBUILD)' command was not found. Make sure you have Sphinx \
installed, then set the SPHINXBUILD environment variable to point \
to the full path of the '$(SPHINXBUILD)' executable. Alternatively you \
can add the directory with the executable to your PATH. \
If you don't have Sphinx installed, grab it from http://sphinx-doc.org/)
endif

ALLSPHINXOPTS   = -d $(BUILDDIR)/doctrees $(SPHINXOPTS) %(rsrcdir)s

.PHONY: help clean html dirhtml singlehtml 

help:
\t@echo "Please use 'make <target>' where <target> is one of"
\t@echo "  html       to make standalone HTML files"
\t@echo "  dirhtml    to make HTML files named index.html in directories"

clean:
\trm -rf $(BUILDDIR)/*

html:
\t$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html
\t@echo
\t@echo "Build finished. The HTML pages are in $(BUILDDIR)/html."

dirhtml:
\t$(SPHINXBUILD) -b dirhtml $(ALLSPHINXOPTS) $(BUILDDIR)/dirhtml
\t@echo
\t@echo "Build finished. The HTML pages are in $(BUILDDIR)/dirhtml."
'''

    ABLOG_BATCHFILE = u'''\
@ECHO OFF

REM Command file for Sphinx documentation

if "%%SPHINXBUILD%%" == "" (
\tset SPHINXBUILD=sphinx-build
)
set BUILDDIR=%(rbuilddir)s
set ALLSPHINXOPTS=-d %%BUILDDIR%%/doctrees %%SPHINXOPTS%% %(rsrcdir)s

if "%%1" == "" goto help

if "%%1" == "help" (
\t:help
\techo.Please use `make ^<target^>` where ^<target^> is one of
\techo.  html       to make standalone HTML files
\techo.  dirhtml    to make HTML files named index.html in directories
\tgoto end
)

if "%%1" == "clean" (
\tfor /d %%%%i in (%%BUILDDIR%%\*) do rmdir /q /s %%%%i
\tdel /q /s %%BUILDDIR%%\*
\tgoto end
)


%%SPHINXBUILD%% 2> nul
if errorlevel 9009 (
\techo.
\techo.The 'sphinx-build' command was not found. Make sure you have Sphinx
\techo.installed, then set the SPHINXBUILD environment variable to point
\techo.to the full path of the 'sphinx-build' executable. Alternatively you
\techo.may add the Sphinx directory to PATH.
\techo.
\techo.If you don't have Sphinx installed, grab it from
\techo.http://sphinx-doc.org/
\texit /b 1
)

if "%%1" == "html" (
\t%%SPHINXBUILD%% -b html %%ALLSPHINXOPTS%% %%BUILDDIR%%/html
\tif errorlevel 1 exit /b 1
\techo.
\techo.Build finished. The HTML pages are in %%BUILDDIR%%/html.
\tgoto end
)

if "%%1" == "dirhtml" (
\t%%SPHINXBUILD%% -b dirhtml %%ALLSPHINXOPTS%% %%BUILDDIR%%/dirhtml
\tif errorlevel 1 exit /b 1
\techo.
\techo.Build finished. The HTML pages are in %%BUILDDIR%%/dirhtml.
\tgoto end
)

:end
'''

    USAGE = """\
ABlog v%s
Usage: %%prog [options] [projectdir]
""" % __version__

    EPILOG = """\
For more information, visit <http://ablog.readthedocs.org//>.
"""
    ABLOG_DEFAULTS = {
            'sep': False,
            'dot': '_',
            'language': None,
            'suffix': '.rst',
            'master': 'index',
            'makefile': True,
            'batchfile': True,
            'epub': False
            }


def ask_user(d):
    """Ask the user for quickstart values missing from *d*.

    Values are:

    * path:      root path
    * project:   project name
    * author:    author names
    * version:   version of project
    * release:   release of project
    """
    d.update(ABlogTemplates.ABLOG_DEFAULTS)

    print(d)
    
    print bold('Welcome to the ABlog %s quickstart utility.') % __version__
    print '''
Please enter values for the following settings (just press Enter to
accept a default value, if one is given in brackets).'''

    if 'path' in d:
        print bold('''
Selected root path: %s''' % d['path'])
    else:
        print '''
Enter the root path for your blog.'''
        do_prompt(d, 'path', 'Root path for your blog', '.', is_path)

    while path.isfile(path.join(d['path'], 'conf.py')) or \
          path.isfile(path.join(d['path'], 'source', 'conf.py')):
        print
        print bold('Error: an existing conf.py has been found in the '
                   'selected root path.')
        print 'ablog-quickstart will not overwrite existing ABlog projects.'
        print
        do_prompt(d, 'path', 'Please enter a new root path (or just Enter '
                  'to exit)', '', is_path)
        if not d['path']:
            sys.exit(1)

    if 'project' not in d:
        print '''
The project name will occur in several places in the built documentation.'''
        do_prompt(d, 'project', 'Project name')
    if 'author' not in d:
        do_prompt(d, 'author', 'Author name(s)')

    if 'version' not in d:
        print '''
ABlog has the notion of a "version" and a "release" for the
software. Each version can have multiple releases. For example, for
Python the version is something like 2.5 or 3.0, while the release is
something like 2.5.1 or 3.0a1.  If you don't need this dual structure,
just set both to the same value.'''
        do_prompt(d, 'version', 'Project version')
    if 'release' not in d:
        do_prompt(d, 'release', 'Project release', d['version'])

    while path.isfile(path.join(d['path'], d['master']+d['suffix'])) or \
          path.isfile(path.join(d['path'], 'source', d['master']+d['suffix'])):
        print
        print bold('Error: the master file %s has already been found in the '
                   'selected root path.' % (d['master']+d['suffix']))
        print 'sphinx-quickstart will not overwrite the existing file.'
        print
        do_prompt(d, 'master', 'Please enter a new file name, or rename the '
                  'existing file and press Enter', d['master'])

    if 'makefile' not in d:
        print '''
A Makefile and a Windows command file can be generated for you so that you
only have to run e.g. `make html' instead of invoking sphinx-build
directly.'''
        do_prompt(d, 'makefile', 'Create Makefile? (y/n)', 'y', boolean)
    if 'batchfile' not in d:
        do_prompt(d, 'batchfile', 'Create Windows command file? (y/n)',
                  'y', boolean)
    print

def ablog_create_blog_src_folder(d):
    '''Creates a folder to hold the .rst files for blog entries'''
    #TODO: we probably need to reference this somewhere in config to use it for automated blog entries, etc.

    blog_src_path = path.join(d['path'], (d['dot'] + 'blog'))
    #print(blog_src_path)
    if not path.exists(blog_src_path):
        mkdir_p(blog_src_path)
        #print("created")
    else:
        pass
        #print("already here")
        
    #print(d['path'])
    #print(d['dot'])
    
def ablog_sphinx_quickstart_wrapper(argv=sys.argv):
    '''Borrowed from Sphinx 1.3b3'''
    if not color_terminal():
        nocolor()
    
    parser = optparse.OptionParser(ABlogTemplates.USAGE, epilog=ABlogTemplates.EPILOG,
                                   version='ABlog v%s' % __version__,
                                   formatter=MyFormatter())
    parser.add_option('-q', '--quiet', action='store_true', dest='quiet',
                      default=False,
                      help='quiet mode')

    '''
    group = parser.add_option_group('Structure options')
    group.add_option('--sep', action='store_true', dest='sep',
                     help='if specified, separate source and build dirs')
    group.add_option('--dot', metavar='DOT', dest='dot',
                     help='replacement for dot in _templates etc.')
    '''

    group = parser.add_option_group('Project basic options')
    group.add_option('-p', '--project', metavar='PROJECT', dest='project',
                     help='project name')
    group.add_option('-a', '--author', metavar='AUTHOR', dest='author',
                     help='author names')
    group.add_option('-v', metavar='VERSION', dest='version',
                     help='version of project')
    group.add_option('-r', '--release', metavar='RELEASE', dest='release',
                     help='release of project')
    group.add_option('-l', '--language', metavar='LANGUAGE', dest='language',
                     help='document language')
    group.add_option('--suffix', metavar='SUFFIX', dest='suffix',
                     help='source file suffix')
    group.add_option('--master', metavar='MASTER', dest='master',
                     help='master document name')

    group = parser.add_option_group('Makefile and Batchfile creation')
    group.add_option('--makefile', action='store_true', dest='makefile',
                     default=False,
                     help='create makefile')
    group.add_option('--no-makefile', action='store_true', dest='no_makefile',
                     default=False,
                     help='not create makefile')
    group.add_option('--batchfile', action='store_true', dest='batchfile',
                     default=False,
                     help='create batchfile')
    group.add_option('--no-batchfile', action='store_true', dest='no_batchfile',
                     default=False,
                     help='not create batchfile')

    # parse options
    try:
        opts, args = parser.parse_args()
    except SystemExit as err:
        return err.code

    if len(args) > 0:
        opts.ensure_value('path', args[0])

    d = vars(opts)
    for k, v in list(d.items()):
        # delete None or False value
        if v is None or v is False:
            del d[k]

    try:
        if 'quiet' in d:
            if 'project' not in d or 'author' not in d or \
               'version' not in d:
                print('''"quiet" is specified, but any of "project", \
                         "author" or "version" is not specified.''')
                return

        if all(['quiet' in d, 'project' in d, 'author' in d,
                'version' in d]):
            # quiet mode with all required params satisfied, use default
            d.setdefault('release', d['version'])
            d2 = ABlogTemplates.ABLOG_DEFAULTS.copy()
            d2.update(d)
            d = d2
            if 'no_makefile' in d:
                d['makefile'] = False
            if 'no_batchfile' in d:
                d['batchfile'] = False

            if path.exists(d['path']) and (
                    not path.isdir(d['path']) or os.listdir(d['path'])):
                print()
                print(bold('Error: specified path is not a directory, or not a'
                           ' empty directory.'))
                print('ablog-quickstart only generate into a empty directory.'
                      ' Please specify a new root path.')
                return
        else:
            ask_user(d)
    except (KeyboardInterrupt, EOFError):
        print()
        print('[Interrupted.]')
        return
    
    #monkey patching of sphinx.quickstart
    sphinx_quickstart.QUICKSTART_CONF = ABlogTemplates.ABLOG_QUICKSTART_CONF
    sphinx_quickstart.EPUB_CONFIG = ABlogTemplates.ABLOG_EPUB_CONFIG
    sphinx_quickstart.MAKEFILE = ABlogTemplates.ABLOG_MAKEFILE
    sphinx_quickstart.BATCHFILE = ABlogTemplates.ABLOG_BATCHFILE
    sphinx_quickstart.MASTER_FILE = ABlogTemplates.ABLOG_MASTER_FILE
    sphinx_quickstart.INTERSPHINX_CONFIG = ABlogTemplates.ABLOG_INTERSPHINX_CONFIG
    
    sphinx_quickstart.generate(d)
    ablog_create_blog_src_folder(d)


def main(argv=sys.argv):
    
    #print(argv)

    ablog_sphinx_quickstart_wrapper(argv)
    
   
    